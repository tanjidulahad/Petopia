import Head from 'next/head'
import { connect } from 'react-redux'
import { useEffect, useState, useRef } from 'react'
import { useRouter } from "next/dist/client/router";

import ProductListPage from '@components/Products/index'
import CatList from '@components/catgegory/cat'
import { Button } from '@components/inputs';
import HomeCartItem from '@components/cart-item/home-cart-item';
import { redirect } from '@components/link';

// Actions
import { getCategoryStart, getShopProductsStart, getCategoryProductsStart, getSearchProductsStart } from "@redux/shop/shop-action";
import { setSearchHandler } from '@redux/search/seatch-actions'
import PageWrapper from '@components/page-wrapper/page-wrapper';
import EmptyCart from '@components/empty-cart';


const Home = ({ products, info, cart, checkout, categories, getCategoryStart, getCategoryProducts, getShopProducts, getSearchProducts, setSearchHandler }) => {
  const totalItems = cart.reduce((prev, item) => prev + item?.quantity, 0)
  const purchaseDetails = checkout.purchaseDetails;
  // const storeId = process.env.NEXT_PUBLIC_DEFAULT_STORE_ID;
  const storeId = info.store_id;
  const [searchResult, setSearchResult] = useState([])
  const [height, setHeight] = useState(0)
  const navBody = useRef(null)
  const Router = useRouter();
  const { category, subCategory, search } = Router.query;
  const [status, setStatus] = useState('loading') //status == loading || failed || success
  const [q, setq] = useState(search ? search : '');

  useEffect(() => { // Componentdidmount
    if (!categories.length) getCategoryStart(storeId);
    setSearchHandler((e) => {
      const { value } = e.target;
      if (value.trim().length > 0) {
        setStatus('loading')
        redirect(`/?search=${value}`)
      } else {
        setSearchResult([])
        redirect(`/`)
      }
      setq(value)
    })
  }, [])

  useEffect(() => {
    if (search) {
      getSearchProducts({ storeId, q: q.trim(), setSearchResult, setStatus })
      setStatus('loading') // Set to success default Because its run whene All  products are fetching

    } else if (category) {
      getCategoryProducts({ storeId, categoryId: category, subCategoryId: subCategory, page: 1, setStatus })
      setStatus('loading') // Set to success default Because its run whene All  products are fetching

      // setq('') // Cleaning query string of search
    } else {
      getShopProducts({ storeId, setStatus })
      setStatus('loading') // Set to success default Because its run whene All  products are fetching
      // setq('') // Cleaning query string of search
    }
  }, [Router.query])
  useEffect(() => {
    navBody.current = document.getElementsByClassName('navbar-body')[0]

  }, [])

  return (
    <div >
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <Navbar /> */}
      <section>
        <div className='wrapper mx-auto'>
          <div className="grid grid-cols-1 sm:grid-cols-12 gap-6">
            <div className="md:pt-8 md:py-6 md:block col-span-full md:col-span-3  xl:col-span-2 border-gray-300 ">
              <CatList list={categories.length > 0 && categories} />
            </div>
            <div className="md:pt-8 md:py-6 col-span-full sm:col-span-12 md:col-span-9 xl:col-span-7 pt-6 md:border-l xl:border-r">
              <ProductListPage storeName={info?.store_name} products={products} status={status} />
            </div>
            <div className="md:pt-8 md:py-6 hidden mt-0 xl:block xl:col-span-3 space-y-6">
              <div className='pb-6 border-b-2'>
                <h2 className=' black-color font-extrabold text-xl'>My Cart</h2>
              </div>
              {
                !!cart.length ? <>
                  {
                    cart.map((item, i) => (
                      <HomeCartItem data={item} key={i} />

                    ))
                  }
                  <div>
                    {
                      !!purchaseDetails ?
                        <>
                          <div className='py-6 flex justify-between items-end' >
                            <h1 className='text-2xl'>Item Total</h1>
                            <div>
                              <span className='text-base font-medium'>{totalItems} item(s) </span>
                              <span className='text-2xl font-semibold'> ₹ {Number(purchaseDetails.calculatedPurchaseTotal).toFixed(2)}</span>
                            </div>
                          </div>
                          <Button type='link' href='/cart' className='block btn-color btn-bg w-full text-center rounded  py-4'>Proceed To Checkout</Button>
                        </>
                        :
                        <>
                          <div className='py-6 flex justify-between items-end' >
                            <h1 className='text-2xl'>Item Total</h1>
                            <div>
                              <span className='text-base font-medium'>{totalItems} item(s) </span>
                              <span className='text-2xl font-semibold'> ₹ {cart.reduce((acc, item) => parseFloat(item.sale_price) + acc, 0)}</span>
                            </div>
                          </div>
                          <Button className='block btn-color btn-bg w-full text-center rounded  py-4' type='link' href='/cart'>Proceed To Checkout</Button>
                        </>
                    }
                  </div>
                </>
                  : <div className="h-64 w-full text-center flex justify-center items-center" style={{ borderRadius: '50%' }}>
                    <div>
                      <EmptyCart />
                      <h4 className=' mt-6'>Your Cart is Empty!</h4>
                    </div>
                  </div>
              }
            </div>
          </div>
        </div >
      </section >
    </div >
  )
}
const mapStateToProps = state => ({
  cart: state.cart,
  info: state.store.info,
  products: state.store.products,
  categories: state.store.categories,
  checkout: state.checkout,
})
const mapDispatchToProps = dispatch => ({
  getShopProducts: (storeId) => dispatch(getShopProductsStart(storeId)),
  getCategoryProducts: (data) => dispatch(getCategoryProductsStart(data)),
  getCategoryStart: (storeId) => dispatch(getCategoryStart(storeId)),
  getSearchProducts: (payload) => dispatch(getSearchProductsStart(payload)),
  setSearchHandler: (payload) => dispatch(setSearchHandler(payload))
})
export default connect(mapStateToProps, mapDispatchToProps)(PageWrapper(Home))

